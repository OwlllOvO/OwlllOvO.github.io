<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020.1.25</title>
      <link href="2021/01/25/2020-1-25/"/>
      <url>2021/01/25/2020-1-25/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-1-25"><a href="#2020-1-25" class="headerlink" title="2020.1.25"></a>2020.1.25</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>假设需要反复对一个数组 a[] 进行以下两个操作：</p><ul><li><p>Query • 求和</p><p>对 a[l] ~ a[r] 求和</p></li><li><p>Update • 修改</p><p>将 a[idx] 的值修改为 val</p></li></ul><p>则有如下解决办法：</p><h3 id="朴素做法"><a href="#朴素做法" class="headerlink" title="朴素做法"></a>朴素做法</h3><ul><li><p>Build</p><p><code>for (int i = 1; i &lt;= n; i++) scanf ("%d", &amp;a[i]);</code></p></li><li><p>Query</p><p><code>for (int i = l; i &lt;= r; i++) sum += a[i];</code> <code>O(n)</code></p></li><li><p>Update</p><p><code>a[idx] = val;</code> <code>O(1)</code></p></li></ul><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><ul><li><p>Build</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (int i = 1; i &lt;= l; i++){scanf ("%d", &amp;a[i]);sum_a[i] = sum_a[i-1] + a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Query</p><p><code>sum = sum_a[r] - sum_a[l - 1];</code> <code>O(1)</code></p></li><li><p>Update</p><p><code>for (int i = idx; i &lt;= n; i++) sum_a[i] += val; </code> <code>O(n)</code></p></li></ul><p>可见，两种方法的时间复杂度都较高，于是引入线段树的数据结构</p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。</p><p>——百度百科</p></blockquote><ul><li><p>Build</p><p>如图，区间依次对半分，每个节点存储一部分区间的和，节点按序标记为 1 ~ n（图中为 0 ~ n - 1）</p><img src="https://cdn.jsdelivr.net/gh/OwlllOvO/Hexo-image/20210125202804.png" style="zoom: 50%;"></li><li><p>Query <code>O(logn)</code></p><ul><li>从根结点开始划分求和区间</li><li>如果节点区间为求和区间的子集：返回节点值</li><li>如果节点区间与求和区间无交集：返回 0</li></ul></li><li><p>Update <code>O(logn)</code></p><ul><li>找到修改的节点，修改值</li><li>向上更新节点值</li></ul></li></ul><h3 id="模板-•-单点修改-•-结构体"><a href="#模板-•-单点修改-•-结构体" class="headerlink" title="模板 • 单点修改 • 结构体"></a>模板 • 单点修改 • 结构体</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXN 1e6+10int a[MAXN], n;struct segmentTree{    int l, r, sum;} node[MAXN &lt;&lt; 2];void pushUp(int i){    node[i].sum = node[i &lt;&lt; 1].sum + node[i &lt;&lt; 1 | 1].sum;}void build_tree(int l, int r, int i){    node[i] = { l, r };    if (l == r)    {        node[i],sum = a[l];        return;    }    int mid = l + r &gt;&gt; 1;    build_tree(l, mid, i &lt;&lt; 1);    build_tree(mid + 1, r, i &lt;&lt; 1 | 1);    pushUp(i);}int query_tree(int l, int r, int i){    if (l &lt;= node[i].l &amp;&amp; node[i].r &lt;= r) return node[i].sum;    int mid = l + r &gt;&gt; 1;    int res = 0;    if (l &lt;= mid) res += query_tree(l, mid, i &lt;&lt; 1);    if (r &gt; mid)  res += query_tree(mid + 1, r, i &lt;&lt; 1 | 1);    return res;}void update_tree(int idx, int val, int i){    if (node[i].l == idx &amp;&amp; node[i].r == idx)    {        node[i].sum = val;        return;    }    int mid = l + r &gt;&gt; 1;    if (idx &lt;= mid) update_tree(idx, val, i &lt;&lt; 1);    else update_tree(idx, val, i &lt;&lt; 1 | 1);    pushUp();}int main(){    build_tree(1, n, 1);    query_tree(l, r, 1);    update_tree(idx, val, 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>x &lt;&lt; 1: x * 2</li><li>x &gt;&gt; 1: x / 2</li><li>x &lt;&lt; 1 | 1: x * 2 + 1</li></ul><h3 id="模板-•-单点修改-•-数组"><a href="#模板-•-单点修改-•-数组" class="headerlink" title="模板 • 单点修改 • 数组"></a>模板 • 单点修改 • 数组</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXN 1e6+10int a[MAXN], tree[MAXN * 4], n;void build_tree(int node, int start, int end){    if (start == end) tree[node] = arr[start];    int mid = (start + end) / 2;    int left_node  = 2 * node;    int right_node = 2 * node + 1;    build_tree(left_node, start, mid);    build_tree(right_node, mid + 1, end);    tree[node] = tree[left_node] + tree[right_node];}int query_tree(int node, int start, int end, int L, int R){    if (R &lt; start || L &gt; end) return 0;    if (L &lt;= start &amp;&amp; end &lt;= R) return tree[node];    if (start == end) return tree[node];    int mid = (start + end) / 2;    int left_node  = 2 * node;int right_node = 2 * node + 1;    int sum_left  = query_tree(left_node,  start, mid, L, R);    int sum_right = query_tree(right_node, mid+1, end, L, R);}void update_tree(int node, int start, int end, int idx, int val){    if (start == end)    {        a[idx] = val;        tree[node] = val;        return;    }    int mid = (start + end) / 2;    int left_node  = 2 * node;int right_node = 2 * node + 1;    if (idx &gt;= start &amp;&amp; idx &lt;= mid)        update_tree(left_node, start, mid, idx, val);    else        update_tree(right_node, mid+1, end, idx, val);    tree[node] = tree[left_node] + tree[right_node];}int main(){    build_tree(1, 1, n);    query_tree(1, 1, n, L, R);    update_tree(1, 1, n, idx, val);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板-•-区间修改"><a href="#模板-•-区间修改" class="headerlink" title="模板 • 区间修改"></a>模板 • 区间修改</h3><h3 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h3><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="A-例题1-•-SPOJ-GSS1"><a href="#A-例题1-•-SPOJ-GSS1" class="headerlink" title="A 例题1 • SPOJ GSS1"></a>A <a href="https://vjudge.net/contest/419506#problem/A">例题1</a> • <a href="https://vjudge.net/problem/SPOJ-GSS1/origin">SPOJ GSS1</a></h2><h2 id="B-例题2-•-Gym-102770B"><a href="#B-例题2-•-Gym-102770B" class="headerlink" title="B 例题2 • Gym 102770B"></a>B <a href="https://vjudge.net/contest/419506#problem/B">例题2</a> • <a href="https://vjudge.net/problem/Gym-102770B/origin">Gym 102770B</a></h2><h2 id="C-例题3-•-POJ-2182"><a href="#C-例题3-•-POJ-2182" class="headerlink" title="C 例题3 • POJ 2182"></a>C <a href="https://vjudge.net/contest/419506#problem/C">例题3</a> • <a href="https://vjudge.net/problem/POJ-2182/origin">POJ 2182</a></h2><h2 id="D-【模板】单点修改-•-HDU-1166"><a href="#D-【模板】单点修改-•-HDU-1166" class="headerlink" title="D 【模板】单点修改 • HDU 1166"></a>D <a href="https://vjudge.net/contest/419506#problem/D">【模板】单点修改</a> • <a href="https://vjudge.net/problem/HDU-1166/origin">HDU 1166</a></h2><h2 id="E-【模板】区间修改-•-POJ-3468"><a href="#E-【模板】区间修改-•-POJ-3468" class="headerlink" title="E 【模板】区间修改 • POJ 3468"></a>E <a href="https://vjudge.net/contest/419506#problem/E">【模板】区间修改</a> • <a href="https://vjudge.net/problem/POJ-3468/origin">POJ 3468</a></h2><h2 id="F-练习题1-•-CodeForces-339D"><a href="#F-练习题1-•-CodeForces-339D" class="headerlink" title="F 练习题1 • CodeForces 339D"></a>F <a href="https://vjudge.net/contest/419506#problem/F">练习题1</a> • <a href="https://vjudge.net/problem/CodeForces-339D/origin">CodeForces 339D</a></h2><h2 id="G-练习题2-•-HDU-2795"><a href="#G-练习题2-•-HDU-2795" class="headerlink" title="G 练习题2 • HDU 2795"></a>G <a href="https://vjudge.net/contest/419506#problem/G">练习题2</a> • <a href="https://vjudge.net/problem/HDU-2795/origin">HDU 2795</a></h2><h2 id="H-练习题3-•-HDU-2852"><a href="#H-练习题3-•-HDU-2852" class="headerlink" title="H 练习题3 • HDU 2852"></a>H <a href="https://vjudge.net/contest/419506#problem/H">练习题3</a> • <a href="https://vjudge.net/problem/HDU-2852/origin">HDU 2852</a></h2>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.1.23</title>
      <link href="2021/01/23/2020-1-23/"/>
      <url>2021/01/23/2020-1-23/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-1-23"><a href="#2020-1-23" class="headerlink" title="2020.1.23"></a>2020.1.23</h1><h2 id="DFS-•-深度优先搜索"><a href="#DFS-•-深度优先搜索" class="headerlink" title="DFS • 深度优先搜索"></a>DFS • 深度优先搜索</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>深度优先搜索属于图算法的一种，英文缩写为 DFS 即 Depth First Search. 其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><p>——百度百科</p></blockquote><blockquote><p>在一条路上的分岔按顺序选择方向，一条路走到底再返回到最近分岔选择下一条路，这个分岔下所有路全走完后再返回到更上一个分岔走下一条路。</p></blockquote><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><p>深度优先遍历图的方法是，从图中某顶点v出发：</p><ol><li>访问顶点 v ；</li><li>依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</li><li>若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</li></ol></blockquote><p><u>搜索完节点后注意是否需要回溯！</u></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool judge(int x, int y) {};//判断当前状态是否合法bool check(int x, int y) {};//判断是否为最终答案void dfs(int x, int y, int z){    if(!judge(x, y)) return;    if(check(x, y))    {        //保存答案    }    visited[x][y] = 1;//标记已搜索过此节点，防止重复搜索    /*        操作...    */    dfs(x - 1, y, z + 1);    dfs(x + 1, y, z + 1);    dfs(x, y - 1, z + 1);    dfs(x, y + 1, z + 1);    visited[x][y] = 0;//回溯}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h4><p>有些求最优解的题目，可以不用完全遍历，当目前 dfs 的解已经比历史遍历得到的最优解更差时，可以停止遍历，节省一部分时间复杂度。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool judge(int x, int y) {};//判断当前状态是否合法bool check(int x, int y) {};//判断是否为最终答案void dfs(int x, int y, int z){    if(!judge(x, y)) return;    if(z &gt; ans) return;    if(check(x, y))    {        ans = z;        //保存答案    }    visited[x][y] = 1;//标记已搜索过此节点，防止重复搜索    /*        操作...    */    dfs(x - 1, y, z + 1);    dfs(x + 1, y, z + 1);    dfs(x, y - 1, z + 1);    dfs(x, y + 1, z + 1);    visited[x][y] = 0;//回溯}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h4><p>对于遍历某些确定的类型时，如果到达一个节点之后的遍历结果是可以确定的，第一遍先向下遍历得到结果，将这个结果保存，之后再遍历到此节点时直接返回已得到的结果，可以节省一部分时间复杂度。</p><p>如：<a href="https://www.luogu.com.cn/problem/P1434">洛谷 P1434 [SHOI2002]滑雪</a></p><p>题目大意：矩阵求最长下降线路长度</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int fx[5] = { 0, 0, 0, 1, -1 };int fy[5] = { 0, 1, -1, 0, 0 };int dfs(int x, int y){if (f[x][y]) return f[x][y];//记忆化搜索f[x][y] = 1;//题目中答案是有包含这个点的for (int i = 1; i &lt;= 4; i++){int xx = fx[i] + x;int yy = fy[i] + y;//四个方向if (xx &gt; 0 &amp;&amp; yy &gt; 0 &amp;&amp; xx &lt;= n &amp;&amp; yy &lt;= m &amp;&amp; a[x][y] &gt; a[xx][yy]){f[x][y] = max(f[x][y], dfs(xx, yy) + 1);}}return f[x][y];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BFS-•-广度优先搜索"><a href="#BFS-•-广度优先搜索" class="headerlink" title="BFS • 广度优先搜索"></a>BFS • 广度优先搜索</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>从出发点一层一层向外遍历，到达终点就结束。因此，到达终点的方案一定是最优解。</p></blockquote><blockquote><p>无论有多少条路，每条路都只走一步，并记录下状态，等到所有的路都走完一步后，再从第一条路开始走第二步，直至有一条路走到终点。</p></blockquote><h3 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h3><blockquote><p>广度优先搜索使用队列（queue）来实现，整个过程也可以看做一个倒立的树形：</p><ol><li><p>把根节点放到队列的末尾。</p></li><li><p>每次从队列的头部取出一个元素，查看这个元素所有的下一级元素，把它们放到队列的末尾。并把这个元素记为它下一级元素的前驱。</p></li><li><p>找到所要找的元素时结束程序。</p></li><li><p>如果遍历整个树还没有找到，结束程序。</p></li></ol></blockquote><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int fx[5] = { 0, -1, 1, 0, 0 };int fy[5] = { 0, 0, 0, -1, 1 };//上下左右struct node{    int x, y, z;};bool check (int x, int y) {};//判断点是否能走void bfs(int x, int y, int z){    node start;start.x = x;start.y = y;start.z = 0;//start 为出发点，z 为步数    queue &lt;node&gt; q;q.push(start);//将出发点推入队列中等待处理while (!q.empty()){        node now;now = q.front();//从队列中取出首元素处理q.pop();//将该元素取出后要记得推出，否则只推入不推出，死循环t[now.x][now.y] = now.z;//这里是记录了到 [now.x][now.y] 的最短路径，也可以做其他操作for (int i = 1; i &lt;= 4; i++)//往四个方向继续遍历{            if (check (now.x + fx[i], now.y + fy[i])){node next;next.x = now.x + fx[i];next.y = now.y + fy[i];next.z = now.z + 1;vi[next.x][next.y] = 1;q.push(next);//将该点保存并推入队列中，等待前面的处理完后再走下一步}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><blockquote><p>对一个有向无环图 (Directed Acyclic Graph简称DAG) G进行拓扑排序，是将 G 中所有顶点排成一个线性序列，使得图中任意一对顶点 u 和 v，若边 &lt;u,v&gt;∈E(G)，则u在线性序列中出现在 v 之前。通常，这样的线性序列称为满足拓扑次序 (Topological Order) 的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p><p>——百度百科</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>由 AOV 网构造拓扑序列的拓扑排序算法主要是循环执行以下两步，直到不存在入度为0的顶点为止。</p><ol><li><p>选择一个入度为 0 的顶点并输出之；</p></li><li><p>从网中删除此顶点及所有出边。</p><p>循环结束后，若输出的顶点数小于网中的顶点数，则输出“有回路”信息，否则输出的顶点序列就是一种拓扑序列。</p></li></ol><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><p>待更</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="A-Find-a-way-•-HDU-2612"><a href="#A-Find-a-way-•-HDU-2612" class="headerlink" title="A Find a way • HDU 2612"></a>A <a href="https://vjudge.net/contest/419048#problem/A">Find a way</a> • <a href="https://vjudge.net/problem/HDU-2612/origin">HDU 2612</a></h3><h3 id="B-Dungeon-Master-•-POJ-2251"><a href="#B-Dungeon-Master-•-POJ-2251" class="headerlink" title="B Dungeon Master • POJ 2251"></a>B <a href="https://vjudge.net/contest/419048#problem/B">Dungeon Master</a> • <a href="https://vjudge.net/problem/POJ-2251/origin">POJ 2251</a></h3><h3 id="C-Red-and-Black-•-HDU-1312"><a href="#C-Red-and-Black-•-HDU-1312" class="headerlink" title="C Red and Black • HDU 1312"></a>C <a href="https://vjudge.net/contest/419048#problem/C">Red and Black</a> • <a href="https://vjudge.net/problem/HDU-1312/origin">HDU 1312</a></h3><h3 id="D-Counting-Sheep-•-HDU-2952"><a href="#D-Counting-Sheep-•-HDU-2952" class="headerlink" title="D Counting Sheep • HDU 2952"></a>D <a href="https://vjudge.net/contest/419048#problem/D">Counting Sheep</a> • <a href="https://vjudge.net/problem/HDU-2952/origin">HDU 2952</a></h3><h3 id="E-N皇后问题-•-HDU-2553"><a href="#E-N皇后问题-•-HDU-2553" class="headerlink" title="E N皇后问题 • HDU 2553"></a>E <a href="https://vjudge.net/contest/419048#problem/E">N皇后问题</a> • <a href="https://vjudge.net/problem/HDU-2553/origin">HDU 2553</a></h3><h3 id="F-A-Funny-Bipartite-Graph-•-计蒜客-42577"><a href="#F-A-Funny-Bipartite-Graph-•-计蒜客-42577" class="headerlink" title="F  A Funny Bipartite Graph • 计蒜客 42577"></a>F <a href="https://vjudge.net/contest/419048#problem/F"> A Funny Bipartite Graph</a> • <a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-42577/origin">计蒜客 42577</a></h3><h3 id="G-wyh2000-and-pupil-•-HDU-5285"><a href="#G-wyh2000-and-pupil-•-HDU-5285" class="headerlink" title="G wyh2000 and pupil • HDU 5285"></a>G <a href="https://vjudge.net/contest/419048#problem/G">wyh2000 and pupil</a> • <a href="https://vjudge.net/problem/HDU-5285/origin">HDU 5285</a></h3><h3 id="H-Legal-or-Not-•-HDU-3342"><a href="#H-Legal-or-Not-•-HDU-3342" class="headerlink" title="H Legal or Not • HDU 3342"></a>H <a href="https://vjudge.net/contest/419048#problem/H">Legal or Not</a> • <a href="https://vjudge.net/problem/HDU-3342/origin">HDU 3342</a></h3>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> 拓扑排序 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.1.22</title>
      <link href="2021/01/22/2020-1-22/"/>
      <url>2021/01/22/2020-1-22/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-1-22"><a href="#2020-1-22" class="headerlink" title="2020.1.22"></a>2020.1.22</h1><h2 id="二分查找-•-Binary-Search"><a href="#二分查找-•-Binary-Search" class="headerlink" title="二分查找 • Binary Search"></a>二分查找 • Binary Search</h2><blockquote><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p><p>——百度百科</p></blockquote><ul><li><p>有序排列</p><p><code>sort (a + 1, a + n + 1, cmp);</code></p></li><li><p>时间复杂度 <strong>O(logn)</strong></p></li></ul><p>学了二分以后给我的感觉就是很多东西都可以拿来二分，以前以为只有查找可以用二分，现在知道原来很多有范围的东西，都可以用二分来逼近答案。</p><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><h4 id="找-gt-s-的数中最小的"><a href="#找-gt-s-的数中最小的" class="headerlink" title="找 >= s 的数中最小的"></a>找 &gt;= s 的数中最小的</h4><ul><li><p>记录答案</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool check (int x){    if (a[x] &gt;= s) return 1;    else return 0;}int l = 1, r = n, ans = 0;while (l &lt;= r){    int mid = (l + r) / 2;    if (check (mid))    {        ans = mid;        r = mid - 1;    }    else l = mid + 1;}printf ("%d", a[ans]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>不记录答案 • r 逼近答案</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int l = 1, r = n;while (l &lt; r){    int mid = (l + r) / 2;    if (a[mid] &gt;= s) r = mid;    else l = mid + 1;}printf ("%d", a[r]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果 a[mid] &gt;= s 成立，接下来应该向左继续查找，而此时 mid 是符合要求的，所以要保留，因此 r = mid</p></li><li><p>如果 a[mid] &gt;= s 不成立，接下来应该向右继续查找，而此时 mid 是不符合要求的，所以要舍弃，因此 l = mid + 1</p></li><li><p>输出的数一定是要符合要求的，每次查找 r = mid，r一定是符合要求，而 l 不一定，所以输出 r</p></li></ul><h4 id="找-lt-s-的数中最大的"><a href="#找-lt-s-的数中最大的" class="headerlink" title="找 < s 的数中最大的"></a>找 &lt; s 的数中最大的</h4><ul><li><p>记录答案</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool check (int x){    if (a[x] &lt; s) return 1;    else return 0;}int l = 1, r = n, ans = 0;while (l &lt;= r){    int mid = (l + r) / 2;    if (check (mid))    {        ans = mid;        l = mid + 1;    }    else r = mid - 1;}printf ("%d", a[ans]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>不记录答案 • l 逼近答案</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int l = 1, r = n;while (l &lt; r){    int mid = (l + r + 1) / 2;    if (a[i] &lt; s) l = mid;    else r = mid - 1;}printf ("%d", a[l]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果 a[mid] &lt; s 成立，接下来应该向右继续查找，而此时 mid 是符合答案的，所以要保留，因此 l = mid</p></li><li><p>如果 a[mid] &lt; s 不成立，接下来应该向左继续查找，而此时 mid 是不符合答案的，所以要舍弃，因此 r = mid - 1</p></li><li><p>输出的数一定是要符合要求的，每次查找 l = mid，l一定是符合要求，而 r 不一定，所以输出 l</p></li></ul><h3 id="浮点二分"><a href="#浮点二分" class="headerlink" title="浮点二分"></a>浮点二分</h3><p>浮点二分只能用记录答案方法，而且要设置一个范围使得查找能退出循环</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const double eps = 1e-8;double l = 0, r = n;while (r - l &gt; eps){    double mid = (l + r) / 2;    if (check (mid))    {        ans = mid;        r = mid - 1;    }    else l = r + 1;}printf ("%d", ans);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="A-Can-you-solve-this-equation-•-HDU-2199"><a href="#A-Can-you-solve-this-equation-•-HDU-2199" class="headerlink" title="A Can you solve this equation? • HDU 2199"></a>A <a href="https://vjudge.net/contest/418909#problem/A">Can you solve this equation?</a> • <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2199">HDU 2199</a></h3><h3 id="B-Dating-with-girls-1-•-HDU-2578"><a href="#B-Dating-with-girls-1-•-HDU-2578" class="headerlink" title="B Dating with girls(1) • HDU 2578"></a>B <a href="https://vjudge.net/contest/418909#problem/B">Dating with girls(1)</a> • <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2578">HDU 2578</a></h3><h3 id="C-Aggressive-cows-•-POJ-2456"><a href="#C-Aggressive-cows-•-POJ-2456" class="headerlink" title="C Aggressive cows • POJ 2456"></a>C <a href="https://vjudge.net/contest/418909#problem/C">Aggressive cows</a> • <a href="http://poj.org/problem?id=2456">POJ 2456</a></h3><h3 id="D-Pie-•-POJ-3122"><a href="#D-Pie-•-POJ-3122" class="headerlink" title="D  Pie • POJ 3122"></a>D <a href="https://vjudge.net/contest/418909#problem/D"> Pie</a> • <a href="http://poj.org/problem?id=3122">POJ 3122</a></h3><h3 id="E-River-Hopscotch-•-POJ-3258"><a href="#E-River-Hopscotch-•-POJ-3258" class="headerlink" title="E River Hopscotch • POJ 3258"></a>E <a href="https://vjudge.net/contest/418909#problem/E">River Hopscotch</a> • <a href="http://poj.org/problem?id=3258">POJ 3258</a></h3><h3 id="F-4-Values-whose-Sum-is-0-•-POJ-2785"><a href="#F-4-Values-whose-Sum-is-0-•-POJ-2785" class="headerlink" title="F 4 Values whose Sum is 0 • POJ 2785"></a>F <a href="https://vjudge.net/contest/418909#problem/F">4 Values whose Sum is 0</a> • <a href="http://poj.org/problem?id=2785">POJ 2785</a></h3><h3 id="G-Defuse-the-Bombs-•-Gym-102822D"><a href="#G-Defuse-the-Bombs-•-Gym-102822D" class="headerlink" title="G Defuse the Bombs • Gym 102822D"></a>G <a href="https://vjudge.net/contest/418909#problem/G">Defuse the Bombs</a> • <a href="https://vjudge.net/problem/Gym-102822D/origin">Gym 102822D</a></h3>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.1.21</title>
      <link href="2021/01/21/2020-1-21/"/>
      <url>2021/01/21/2020-1-21/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-1-21"><a href="#2020-1-21" class="headerlink" title="2020.1.21"></a>2020.1.21</h1><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><blockquote><p>并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的合并及查询问题。常常在使用中以森林来表示。</p><p>——百度百科</p></blockquote><h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h3><ul><li><p>初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int f[N];void ini(int x){for (int i = 1; i &lt;= x; i++)f[i] = i;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使所有元素都指向自己，将自己作为父节点</p></li><li><p>查找</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x){    if (x == f[x]) return x;    return find(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge(int x, int y){    f[find(x)] = find(y);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><blockquote><p>每次查找的时候，如果路径较长，则修改信息，以便下次查找的时候速度更快。</p><p>第一步，找到根结点。</p><p>第二步，修改查找路径上的所有节点，将它们都指向根结点。</p><p>——百度百科</p></blockquote><ul><li><p>查找</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x){    if (x == f[x]) return x;    f[x] = find (f[x]);    return f[x];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者写成这样：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x){    if (x != f[x]) f[x] = find (f[x]);    return f[x];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再用二元运算符：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x) { return x == f[x] ? x : (f[x] = find(f[x])); }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>这么写可以让自己看起来更加大佬</del></p></li></ul><h4 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h4><p>将深度小的树合并到深度大的树上</p><ul><li><p>初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ini(int x){for (int i = 1; i &lt;= x; i++){f[i] = i;rank[i] = 1;//深度都初始化为1}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge(int x, int y){int a = find(x), b = find(y);//先找到两个根节点if (rank[a] &lt;= rank[b]) f[a] = b;else fa[b] = a;if (rank[a] == rank[b] &amp;&amp; a != b) rank[b]++;//如果深度相同且根节点不同，则新的根节点的深度+1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为是小的直接连接到大的根节点，所以合并时小的那一支的深度+1，只有当两者深度相同时才会产生更大的深度</p></li></ul><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="种族并查集"><a href="#种族并查集" class="headerlink" title="种族并查集"></a>种族并查集</h4><p>通过多个并查集将不同的元素归类，并维护相互之间的关系</p><p>例题：<a href="https://www.luogu.com.cn/problem/P2024">洛谷 P2024 食物链</a></p><p>​    用三个并查集分别表示自己、自己的猎物（自己吃的）以及自己的天敌（吃自己的），同时维护三个并查集，通过他们三者的关系判断当前读入数据是否为真</p><h4 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h4><p><u>基于路径压缩</u>，每个节点都记录的是与根节点之间的权值</p><ul><li><p>查找</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x){if (x != f[x]){int t = f[x];f[x] = find(f[x]);value[x] += value[t];}return f[x];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge(int x, int y){    int px = find(x);    int py = find(y);    if (px != py)    {        f[px] = py;        value[px] = -value[x] + value[y] + s;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/OwlllOvO/Hexo-image/20210121213127.PNG"></p></li></ul><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><h4 id="A-Ubiquitous-Religions-•-POJ-2524"><a href="#A-Ubiquitous-Religions-•-POJ-2524" class="headerlink" title="A Ubiquitous Religions • POJ 2524"></a>A <a href="https://vjudge.net/contest/418701#problem/A">Ubiquitous Religions</a> • <a href="http://poj.org/problem?id=252">POJ 2524</a></h4><h4 id="B-食物链-•-洛谷-P2024"><a href="#B-食物链-•-洛谷-P2024" class="headerlink" title="B 食物链 • 洛谷 P2024"></a>B <a href="https://vjudge.net/contest/418701#problem/B">食物链</a> • <a href="https://www.luogu.com.cn/problem/P2024">洛谷 P2024</a></h4><h4 id="C-How-Many-Tables-•-HDU-1213"><a href="#C-How-Many-Tables-•-HDU-1213" class="headerlink" title="C How Many Tables • HDU 1213"></a>C <a href="https://vjudge.net/contest/418701#problem/C">How Many Tables</a> • <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1213">HDU 1213</a></h4><h4 id="D-畅通工程-•-HDU-1232"><a href="#D-畅通工程-•-HDU-1232" class="headerlink" title="D 畅通工程 • HDU 1232"></a>D <a href="https://vjudge.net/contest/418701#problem/D">畅通工程</a> • <a href="https://vjudge.net/problem/HDU-1232/origin">HDU 1232</a></h4><h4 id="E-人见人爱A-B-•-HDU-2035"><a href="#E-人见人爱A-B-•-HDU-2035" class="headerlink" title="E 人见人爱A^B •  HDU 2035"></a>E <a href="https://vjudge.net/contest/418701#problem/E">人见人爱A^B</a> • <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2035"> HDU 2035</a></h4><h4 id="F-How-Many-Answers-Are-Wrong-•-HDU-3038"><a href="#F-How-Many-Answers-Are-Wrong-•-HDU-3038" class="headerlink" title="F How Many Answers Are Wrong •  HDU 3038"></a>F <a href="https://vjudge.net/contest/418701#problem/F">How Many Answers Are Wrong</a> • <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3038"> HDU 3038</a></h4>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.1.20</title>
      <link href="2021/01/20/2020-1-20/"/>
      <url>2021/01/20/2020-1-20/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-1-20"><a href="#2020-1-20" class="headerlink" title="2020.1.20"></a>2020.1.20</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="常用-OJ"><a href="#常用-OJ" class="headerlink" title="常用 OJ"></a>常用 OJ</h3><ul><li><p><a href="https://vjudge.net/">Vjudge</a></p></li><li><p><a href="http://www.nowcoder.com/">nowcoder</a></p></li><li><p><a href="https://pintia.cn/">PTA</a></p></li></ul><h3 id="常用语言-C"><a href="#常用语言-C" class="headerlink" title="常用语言 - C++"></a>常用语言 - C++</h3><p><del>终于用回 C++ 了，上程序设计基础转 C 好累</del></p><p>万能头文件 <code>#include&lt;bits/stdc++.h&gt;</code></p><p>等于以下头文件：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;complex&gt;#include &lt;deque&gt;#include &lt;exception&gt;#include &lt;fstream&gt;#include &lt;functional&gt;#include &lt;iomanip&gt;#include &lt;ios&gt;#include &lt;iosfwd&gt;#include &lt;iostream&gt;#include &lt;istream&gt;#include &lt;iterator&gt;#include &lt;limits&gt;#include &lt;list&gt;#include &lt;locale&gt;#include &lt;map&gt;#include &lt;memory&gt;#include &lt;new&gt;#include &lt;numeric&gt;#include &lt;ostream&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;sstream&gt;#include &lt;stack&gt;#include &lt;stdexcept&gt;#include &lt;streambuf&gt;#include &lt;string&gt;#include &lt;typeinfo&gt;#include &lt;utility&gt;#include &lt;valarray&gt;#include &lt;vector&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(Visual Studio 不自带万能头文件)</p><h3 id="时间（空间）复杂度"><a href="#时间（空间）复杂度" class="headerlink" title="时间（空间）复杂度"></a>时间（空间）复杂度</h3><p><del>dddd懂的都懂</del></p><h2 id="C-STL"><a href="#C-STL" class="headerlink" title="C++: STL"></a>C++: STL</h2><h3 id="string-•-字符串"><a href="#string-•-字符串" class="headerlink" title="string • 字符串"></a>string • 字符串</h3><h4 id="头文件-include-lt-string-gt"><a href="#头文件-include-lt-string-gt" class="headerlink" title="头文件 : #include<string>"></a>头文件 : <code>#include&lt;string&gt;</code></h4><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li>赋初值</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1 = "1234";string s2;s2 = "1234";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>清除</p><p><code>s1.clear();</code></p></li><li><p>求长度</p><p><code>l = s1.length();</code></p></li><li><p>在尾部插入字符</p><p><code>s1.push_back('x');</code></p></li><li><p>在尾部插入字符串</p><p><code>s1.append(s2);</code></p></li><li><p>从s1中找到字符 ‘x’ 的位置</p><p><code>pos = s1.find('x');</code></p></li><li><p>删除</p><p><code>s1.erase()</code></p></li></ul><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>​    <code>    vector&lt;int&gt;v1;</code></p><p>​    <code>vector&lt;string&gt;v2("1234");</code></p><p>​    <code>vecotr&lt;int&gt;v3(5,2);</code></p><p>​    <code>vector&lt;int&gt;v4(v3);</code></p><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>在数组的最后添加一个数据</p><p><code>v1.push_back();</code></p></li><li><p>去掉数组的最后一个数据</p><p><code>v1.pop_back();</code></p></li><li><p>得到数组头的引用</p><p><code>v1.front();</code></p></li><li><p>得到数组的最后一个单元的引用</p><p><code>v1.back();</code></p></li><li><p>获取 vector 大小</p><p><code>v1.size();</code></p></li></ul><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>随机访问 <strong>O(1)</strong></li><li>删除 <strong>O(n)</strong></li></ul><h3 id="queue-•-FIFO"><a href="#queue-•-FIFO" class="headerlink" title="queue • FIFO"></a>queue • FIFO</h3><h4 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h4><p>​    <code>queue&lt;int&gt; q;</code></p><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>入队</p><p><code>q.push();</code></p></li><li><p>出队</p><p><code>q.pop();</code></p></li><li><p>首位</p><p><code>q.front();</code></p></li><li><p>末位</p><p><code>q.back();</code></p></li><li><p>大小</p><p><code>q.size();</code></p></li><li><p>判断是否为空</p><p><code>q.empty();</code></p></li></ul><h3 id="stack-•-FILO"><a href="#stack-•-FILO" class="headerlink" title="stack • FILO"></a>stack • FILO</h3><h4 id="构造-2"><a href="#构造-2" class="headerlink" title="构造"></a>构造</h4><p>​    <code>stack&lt;int&gt; s;</code></p><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>入队</p><p><code>s.push();</code></p></li><li><p>出队</p><p><code>s.pop();</code></p></li><li><p>首位</p><p><code>s.top();</code></p></li><li><p>大小</p><p><code>s.size();</code></p></li><li><p>判断是否为空</p><p><code>s.empty();</code></p></li></ul><h3 id="set-•-集合"><a href="#set-•-集合" class="headerlink" title="set • 集合"></a>set • 集合</h3><h4 id="构造-3"><a href="#构造-3" class="headerlink" title="构造"></a>构造</h4><p>​    <code>set&lt;int&gt;s;</code></p><h4 id="常用函数-4"><a href="#常用函数-4" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>插入</p><p><code>s.insert();</code></p></li><li><p>清除</p><p><code>s.erase();</code></p></li><li><p>查找</p><p><code>s.find([int]);</code></p></li><li><p>大小</p><p><code>[int] = s.size();</code></p></li><li><p>清空</p><p><code>s.clear();</code></p></li><li><p>值元素个数</p><p><code>s.count([int]);</code></p></li><li><p>首元</p><p><code>s.begin();</code></p></li><li><p>末元</p><p><code>s.end();</code></p></li><li><p>是否为空</p><p><code>s.empty();</code></p></li></ul><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>查询 <strong>O(logn)</strong></li><li>插入 <strong>O(logn)</strong></li><li>删除 <strong>O(logn)</strong></li></ul><h3 id="map-•-key-value"><a href="#map-•-key-value" class="headerlink" title="map • key - value"></a>map • key - value</h3><h4 id="构造-4"><a href="#构造-4" class="headerlink" title="构造"></a>构造</h4><p>​    1.<code>map&lt;int,int&gt;mp;</code></p><p>​    2.<code>map&lt;string,int&gt;mp;</code></p><h4 id="常用函数-5"><a href="#常用函数-5" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>访问</p><p>1.<code>mp[[int]] = [int];</code></p><p>2.<code>mp[[string]] = [int];</code></p></li></ul><h4 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>插入 <strong>O(logn)</strong></li><li>删除 <strong>O(logn)</strong></li></ul><h3 id="list-•-双向链表"><a href="#list-•-双向链表" class="headerlink" title="list • 双向链表"></a>list • 双向链表</h3><h4 id="构造-5"><a href="#构造-5" class="headerlink" title="构造"></a>构造</h4><p>​    <code>list&lt;int&gt;li;</code></p><h4 id="常用函数-6"><a href="#常用函数-6" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><p>加到末位</p><p><code>li.push_back();</code></p></li><li><p>加到首位</p><p><code>li.push_front();</code></p></li><li><p>去掉末位</p><p><code>li.pop_back();</code></p></li><li><p>去掉首位</p><p><code>li.pop_front();</code></p></li><li><p>插入</p><p><code>li.insert();</code></p></li><li><p>删除</p><p><code>li.erase();</code></p></li></ul><h4 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>随机访问 <strong>×</strong></li><li>插入 <strong>O(1)</strong></li><li>删除 <strong>O(1)</strong></li></ul><h3 id="sort-•-快速排序"><a href="#sort-•-快速排序" class="headerlink" title="sort • 快速排序"></a>sort • 快速排序</h3><p><del>用习惯 sort 后受够了 qsort 的折磨，现在终于回来了</del></p><p><del>qsort 到现在都还没学会，还好期末开卷照着书打</del></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="A-Rails-•-POJ-1363"><a href="#A-Rails-•-POJ-1363" class="headerlink" title="A Rails • POJ 1363"></a>A <a href="https://vjudge.net/contest/418487#problem/A">Rails</a> • <a href="https://vjudge.net/problem/POJ-1363/origin">POJ 1363</a></h3><h3 id="B-表达式括号匹配-•-计蒜客-T1655"><a href="#B-表达式括号匹配-•-计蒜客-T1655" class="headerlink" title="B 表达式括号匹配 • 计蒜客 T1655"></a>B <a href="https://vjudge.net/contest/418487#problem/B">表达式括号匹配</a> • <a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-T1655/origin">计蒜客 T1655</a></h3><h3 id="C-Let-the-Balloon-Rise-•-HDU-1004"><a href="#C-Let-the-Balloon-Rise-•-HDU-1004" class="headerlink" title="C  Let the Balloon Rise  • HDU 1004"></a>C <a href="https://vjudge.net/contest/418487#problem/C"> Let the Balloon Rise</a>  • <a href="https://vjudge.net/problem/HDU-1004/origin">HDU 1004</a></h3><h3 id="D-ACboy-needs-your-help-again-•-HDU-1702"><a href="#D-ACboy-needs-your-help-again-•-HDU-1702" class="headerlink" title="D  ACboy needs your help again! • HDU 1702"></a>D <a href="https://vjudge.net/contest/418487#problem/D"> ACboy needs your help again!</a> • <a href="https://vjudge.net/problem/HDU-1702/origin">HDU 1702</a></h3><h3 id="E-排名-•-HDU-1236"><a href="#E-排名-•-HDU-1236" class="headerlink" title="E 排名 • HDU 1236"></a>E <a href="https://vjudge.net/contest/418487#problem/E">排名</a> • <a href="https://vjudge.net/problem/HDU-1236/origin">HDU 1236</a></h3><h3 id="F-人见人爱A-B-•-HDU-2034"><a href="#F-人见人爱A-B-•-HDU-2034" class="headerlink" title="F  人见人爱A-B • HDU 2034"></a>F <a href="https://vjudge.net/contest/418487#problem/F"> 人见人爱A-B</a> • <a href="https://vjudge.net/problem/HDU-2034/origin">HDU 2034</a></h3><h3 id="G-水果-•-HDU-1263"><a href="#G-水果-•-HDU-1263" class="headerlink" title="G 水果 • HDU 1263"></a>G <a href="https://vjudge.net/contest/418487#problem/G">水果</a> • <a href="https://vjudge.net/problem/HDU-1263/origin">HDU 1263</a></h3><h3 id="H-看病要排队-•-HDU-1873"><a href="#H-看病要排队-•-HDU-1873" class="headerlink" title="H 看病要排队 • HDU 1873"></a>H <a href="https://vjudge.net/contest/418487#problem/H">看病要排队</a> • <a href="https://vjudge.net/problem/HDU-1873/origin">HDU 1873</a></h3>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mouseline • 鼠标吸附线条效果</title>
      <link href="2021/01/20/mouseline-shu-biao-xi-fu-xian-tiao-xiao-guo/"/>
      <url>2021/01/20/mouseline-shu-biao-xi-fu-xian-tiao-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>将以下 JavaScript 代码粘贴到网页的页脚 HTML 中即可实现。</p><p>对于 matery 主题来说，放置在 <code>matery\layout\_partial\footer.ejs</code> 文件末尾即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>t<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span>t<span class="token punctuation">.</span>length<span class="token punctuation">,</span>i<span class="token operator">=</span>t<span class="token punctuation">[</span>o<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span>l<span class="token operator">:</span>o<span class="token punctuation">,</span>z<span class="token operator">:</span><span class="token function">n</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"zIndex"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">:</span><span class="token function">n</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"opacity"</span><span class="token punctuation">,</span><span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token function">n</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"0,0,0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">:</span><span class="token function">n</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"count"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">=</span>m<span class="token punctuation">.</span>width<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>c<span class="token operator">=</span>m<span class="token punctuation">.</span>height<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>o<span class="token punctuation">,</span>m<span class="token punctuation">,</span>l<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>x</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>x<span class="token operator">+=</span>i<span class="token punctuation">.</span>xa<span class="token punctuation">,</span>i<span class="token punctuation">.</span>y<span class="token operator">+=</span>i<span class="token punctuation">.</span>ya<span class="token punctuation">,</span>i<span class="token punctuation">.</span>xa<span class="token operator">*=</span>i<span class="token punctuation">.</span>x<span class="token operator">&gt;</span>a<span class="token operator">||</span>i<span class="token punctuation">.</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>ya<span class="token operator">*=</span>i<span class="token punctuation">.</span>y<span class="token operator">&gt;</span>c<span class="token operator">||</span>i<span class="token punctuation">.</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>x<span class="token operator">-</span><span class="token number">.5</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token number">.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>u<span class="token punctuation">.</span>length<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token operator">=</span>u<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token operator">!==</span>n<span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span><span class="token keyword">null</span><span class="token operator">!==</span>n<span class="token punctuation">.</span>y<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token operator">=</span>i<span class="token punctuation">.</span>x<span class="token operator">-</span>n<span class="token punctuation">.</span>x<span class="token punctuation">,</span>m<span class="token operator">=</span>i<span class="token punctuation">.</span>y<span class="token operator">-</span>n<span class="token punctuation">.</span>y<span class="token punctuation">,</span>l<span class="token operator">=</span>o<span class="token operator">*</span>o<span class="token operator">+</span>m<span class="token operator">*</span>m<span class="token punctuation">,</span>l<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>max<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">===</span>y<span class="token operator">&amp;&amp;</span>l<span class="token operator">&gt;=</span>n<span class="token punctuation">.</span>max<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>x<span class="token operator">-=</span><span class="token number">.03</span><span class="token operator">*</span>o<span class="token punctuation">,</span>i<span class="token punctuation">.</span>y<span class="token operator">-=</span><span class="token number">.03</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>max<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">.</span>max<span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span>t<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span><span class="token string">"rgba("</span><span class="token operator">+</span>d<span class="token punctuation">.</span>c<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">.2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>x<span class="token punctuation">,</span>i<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>x<span class="token punctuation">,</span>n<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>u<span class="token punctuation">,</span>m<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token string">"c_n"</span><span class="token operator">+</span>d<span class="token punctuation">.</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">||</span>window<span class="token punctuation">.</span>webkitRequestAnimationFrame<span class="token operator">||</span>window<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token operator">||</span>window<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token operator">||</span>window<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1e3</span><span class="token operator">/</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>w<span class="token operator">=</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>max<span class="token operator">:</span><span class="token number">2e4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span>id<span class="token operator">=</span>l<span class="token punctuation">,</span>m<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">"position:fixed;top:0;left:0;z-index:"</span><span class="token operator">+</span>d<span class="token punctuation">.</span>z<span class="token operator">+</span><span class="token string">";opacity:"</span><span class="token operator">+</span>d<span class="token punctuation">.</span>o<span class="token punctuation">,</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>onresize<span class="token operator">=</span>o<span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span>n<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">,</span>y<span class="token punctuation">.</span>x<span class="token operator">=</span>n<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>y<span class="token punctuation">.</span>y<span class="token operator">=</span>n<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>y<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span>n<span class="token operator">&gt;</span>f<span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> h<span class="token operator">=</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">,</span>g<span class="token operator">=</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>c<span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span>h<span class="token punctuation">,</span>y<span class="token operator">:</span>g<span class="token punctuation">,</span>xa<span class="token operator">:</span>v<span class="token punctuation">,</span>ya<span class="token operator">:</span>p<span class="token punctuation">,</span>max<span class="token operator">:</span><span class="token number">6e3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>u<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating my blog</title>
      <link href="2021/01/20/creating-my-blog/"/>
      <url>2021/01/20/creating-my-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="为什么选择-Hexo"><a href="#为什么选择-Hexo" class="headerlink" title="为什么选择 Hexo"></a>为什么选择 Hexo</h2><p>以前第一次建站的时候因为什么都不知道，就跟着一个教程做了 Wordpress 网站。Wordpress 的优点很明显——非常的方便。不仅建站的时候直接选择 Wordpress 就完成了，之后再在控制台维护网站就行。但之后因为上学，就没再去维护，服务器也没有续，网站就这么没有了..</p><p>这次 ACM 寒假训练，要求我们创建自己的博客，我想着自己都已经创建过自己的网站，就不想用 CSDN、博客园之类的博客，于是又准备重新搭建网站。这时候我了解到了 Hexo，这是一个静态网站，把文件都放在 Github 上，由 Github 托管。这是 Hexo 的一大优点，这样一来不仅不收费，而且只要 Github 还在，网站就不会消失。但这不是我选择 Hexo 的原因。我选择 Hexo 的主要原因还是看到很多非常精美的博客都是用的 Hexo，而 Wordpress 的网站实在找不到好看的主题，于是我也想搭建 Hexo 网站。</p><p>一开始用 Hexo 觉得很麻烦，什么东西都是在文件里修改参数，对网站的操作都要用命令执行，不像 Wordpress 有后台可以非常方便、直观地维护网站。但是用久了之后，学会了之后发现，Hexo 这样才更加方便。因为所有文件都在本地，网站的任何属性都写在文件里面了，想要修改什么直接在文件里修改，更加的灵活，这也是 Hexo 能做得更精美，更加个性化的原因。</p><h2 id="Hexo-建站过程"><a href="#Hexo-建站过程" class="headerlink" title="Hexo 建站过程"></a>Hexo 建站过程</h2><p>写这些不仅是记录我建站的整个过程，还详细地记录我对网站的一些操作和修改，以后万一发生了什么情况需要重做网站，也可以帮助自己回忆 XD</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li><p>macOS 切换 Root 用户</p><ul><li>终端输入指令：<code>sudo su</code></li><li>输入用户密码</li></ul></li><li><p>安装 Node.js</p><ul><li>访问网站 <a href="https://nodejs.org/en/">Node.js</a> 下载最新版本</li><li>安装</li><li>安装完成后即可在终端（cmd）输入指令：<ul><li><code>node -v </code>：查看已安装的 Node 版本，查看是否安装成功</li><li><code>npm -v</code>：查看已安装的 npm 版本，查看是否安装成功</li></ul></li></ul></li><li><p>安装淘宝 cnpm 管理器（加速）</p><ul><li><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></li><li>自动安装</li><li><code>cnpm -v</code>：查看已安装的 cnpm 版本，查看是否安装成功</li></ul></li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ul><li><p>安装 Hexo 框架</p><ul><li><code>cnpm install -g hexo-cli</code></li><li>自动安装</li><li><code>hexo -v</code>：查看已安装的 Hexo 版本，查看是否安装成功</li></ul></li><li><p>建立 Blog 文件夹</p><ul><li><code>mkdir Blog</code>：创建 Blog 文件夹</li><li><code>cd blog</code>：进入 Blog 文件夹</li><li>之后要是出现问题，直接删除 Blog 文件夹从头开始重新做就行</li></ul></li><li><p>Windows 安装 Git</p><ul><li>访问 <a href="https://git-scm.com/">Git</a>，下载 Git 并安装</li><li>之后用 Git Bash 输命令或者继续用 cmd</li></ul></li><li><p>创建 Hexo</p><ul><li>macOS：<code>sudo hexo init</code>：用管理员权限初始化 Hexo</li><li>Windows：<code>hexo init</code>：初始化 Hexo</li></ul></li></ul><h3 id="Hexo-操作"><a href="#Hexo-操作" class="headerlink" title="Hexo 操作"></a>Hexo 操作</h3><ul><li><p>启动 Hexo（本地预览）</p><ul><li><code>hexo s</code> s: start 启动 Hexo</li><li>复制显示的网址用浏览器打开即可</li><li><code>Ctrl + C</code> <code>Y</code> 停止</li></ul></li><li><p>新建文章</p><ul><li><code>hexo n "title"</code> n: new 新建文章</li><li>在 <code>Blog\source\_posts\</code> 中找到新建的 .md 文件用 Typora 编辑</li></ul></li><li><p>生成 Hexo</p><ul><li><code>hexo clean</code>：清理 Hexo</li><li><code>hexo g</code>：生成 Hexo</li></ul></li><li><p>先生成，应用修改，后启动查看效果</p></li></ul><h3 id="将博客部署到远端（Github）"><a href="#将博客部署到远端（Github）" class="headerlink" title="将博客部署到远端（Github）"></a>将博客部署到远端（Github）</h3><ul><li><p>访问 <a href="https://github.com/">Github</a></p></li><li><p>注册/登录 账号</p></li><li><p>新建仓库</p><ul><li>点击右上角 <code>+</code></li><li>点击 <code>New repository</code></li><li>Repository name 填写：Username.github.io</li><li>点击 <code>create repository</code></li></ul></li><li><p><code>cnpm install --save hexo-deployer-git</code> ：在 Blog 目录下安装 Git 部署插件</p></li><li><p>自动安装 忽略 Warning</p></li><li><p>编辑 <code>Blog\_config.yml</code> 文件</p><ul><li><p>下拉找到 <code>\# Deployment</code></p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: https://github.com/Username/Username.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 type 后有单引号’’，git 填在单引号里面</p><p>repo 填的是 Github Repo 的地址，复制过来就行</p></li><li><p>保存并退出</p></li></ul></li><li><p><code>hexo d</code> d: deploy 部署到远端</p><ul><li>第一次部署要求输入 Github 账号密码</li></ul></li><li><p>访问 Username.github.io 即可</p></li></ul><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul><li><p><code>git clone 主题网址.git themes/主题名</code></p></li><li><p>编辑 <code>Blog\_config.yml</code> 文件</p><ul><li><p>下拉找到 <code>theme</code></p></li><li><p>修改为 <code>theme: 主题名</code></p></li><li><p>重新清理，生成，启动</p></li><li><p><code>hexo clean</code></p></li><li><p><code>hexo g</code></p></li><li><p><code>hexo s</code></p></li></ul></li></ul><h2 id="Hexo-个性化定制"><a href="#Hexo-个性化定制" class="headerlink" title="Hexo 个性化定制"></a>Hexo 个性化定制</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/20/hello-world/"/>
      <url>2021/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
